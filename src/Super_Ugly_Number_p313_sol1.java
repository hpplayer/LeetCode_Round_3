import java.util.*;

/*
313. Super Ugly Number

Write a program to find the nth super ugly number.

Super ugly numbers are positive numbers whose all prime factors are in the given prime list primes of size k.
For example, [1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32] is the sequence of the first 12 super ugly numbers given primes = [2, 7, 13, 19] of size 4.

Note:
(1) 1 is a super ugly number for any given primes.
(2) The given numbers in primes are in ascending order.
(3) 0 < k ¡Ü 100, 0 < n ¡Ü 106, 0 < primes[i] < 1000.
*/

/**
 * DP solution
 * 
 * Advanced version of Ugly_Number_II_p264_sol1
 * We treat each base prime number as a virtual array. Number in each array will be got from * the corresponding prime number
 * Then our target will be nth element in merged array. Due to the property of virtual array, we will get their old value from merged dp array.
 * So we need an extra array to keep the index of those virtual array in merged dp array.
 * Our target is to scan all k virtual arrays, and calculate their next smallest value by dp[index[i]] * primes[i]
 * 
 * If our n < k, then we will get nth number before we read all virtual arrays
 * Otherwise, all base primes will be inserted in dp[], and we can use index array to get the next smallest number
 * 
 * Time complexity: O(kn)
 * Space complexity:O(n)
 * 
 * Remark:
 * This solution can also be solved by using heap solution, but it will not be accepted by OJ due to LTE.
 * I still list it in sol2 as future reference
 * 
 * @author hpPlayer
 * @date Feb 24, 2016 9:17:49 PM
 */
public class Super_Ugly_Number_p313_sol1 {
	public static void main(String[] args){
		int[] primes = {2,3,11,13,19,29,31,37,41,47};
		System.out.println(nthSuperUglyNumber(95, primes));
	}
	
    public static int nthSuperUglyNumber(int n, int[] primes) {
        //DP solution, this solution is very similar to Ugly_Number_II_p264_sol1
        //We will keep k virtual arrays, number in each virtual array will be generated by * primes[i]
        //the next ugly number will come from the smallest num after * primes[i]
        
        //dp array records all ugly numbers we generated
        int[] dp = new int[n];
        dp[0] = 1;
        
        //index array keep the index of each virtual array
        //the index will point to the current head(smallest num in this array) of this virtual array
        //so the next smallest num in current virtual array would be primes[i] * dp[index[i]]
        int[] index = new int[primes.length];
        
        //update dp table
        for(int i = 1; i < n; i++){
            //set initial dp value so that we can get it min value by using Math.min() 
            dp[i] = Integer.MAX_VALUE;
            //check all virtual arrays and find the next smallest number we can get 
            for(int j = 0; j < primes.length; j++){
                dp[i] = Math.min(dp[i], primes[j] * dp[index[j]]);
            }
            
            //Only after we checked all virtual arrays, can we decide which one has the next smallest number
            //so now we will move index pointer in those virtual arrays forward
            for(int j = 0; j < primes.length; j++){
                if(primes[j] * dp[index[j]] == dp[i]) index[j]++;
            }
        }
        
        //get the nth ugly number from dp array
        return dp[n-1];
    }
}
